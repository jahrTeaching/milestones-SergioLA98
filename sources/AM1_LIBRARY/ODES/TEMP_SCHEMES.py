# -*- coding: utf-8 -*-
"""
Created on Tue Oct  4 19:39:39 2022

@author: serg_
"""
#from AM1_LIBRARY.NUMERIC.NewtonSolve import newton
from scipy.optimize import newton, fsolve
from numpy import zeros, matmul, size
from numpy.linalg import norm
"""
----------------------------------------------------------
TEMP_SCHEMES

This Module includes different temp schemes to integrate numerical problems

-Inputs:
    
    U: State Vector at integration time tn
    dt: time step
    t: integration time instant tn
    F(U,t): Function dU/dt = F(U,t)
    
-Output: the return
    
    U State Vector at desired step tn + dt
----------------------------------------------------------
"""

def Euler_Scheme(U, dt, t, F):
    Euler_Scheme.__name__ = "Euler"    
    return U + dt * F(U, t)



def RK4_Scheme(U, dt, t, F):

    RK4_Scheme.__name__ = "Runge-Kutta 4"
    k1 = F(U,t)
    k2 = F(U + k1 * dt/2, t + dt/2)
    k3 = F(U + k2 * dt/2, t + dt/2)
    k4 = F(U + k3 * dt, t + dt)

    return U + (dt/6) * (k1 + 2*k2 + 2*k3 + k4)



def InvEuler_Scheme(U, dt, t, F):
    
    InvEuler_Scheme.__name__ = "Inverse Euler"
    def InvEuler_Eq(X):     
          return X - U - dt * F(X, t)

    return newton(InvEuler_Eq, U ) 



def CrankNicolson_Scheme(U, dt, t, F ): 

    CrankNicolson_Scheme.__name__ = "Crank Nicolson"
    def CN_Eq(X): 
         
         return  X - U - (F(X,t+dt) + F(U, t))*dt/2
  
    return newton( CN_Eq, U )


def LeapFrog (U, dt, t, F ):
     
     LeapFrog.__name__ = "LeapFrog"
     
     if t == 0:
         U = U + dt*F(U, t) #Euler Inizialitation
     else:
        p = int(len(U)/2)
        
        U_aux = U #puntero mismo ID
        aux = F (U_aux, t)

        U_aux [p :] += aux[p :]*dt/2.0 #no cambia ID, actualiza
        U_aux [: p] += aux[: p]*dt

        aux = F (U_aux, t)
        
        U_aux [p :] +=  aux[p :]*dt/2.0
        
        #U = U_aux innecesario, Uaux tiene el mismo id, es un alias
        # se va actualizando
        
     return U

def Embedded_RK(U, dt, t, F):

    Embedded_RK.__name__ =="Embedded RK"
    Method = ["HeunEuler21", "RK21", "BogackiShampine", "DOPRI54",
              "CashKarp", "Fehlberg54", "Fehlberg87", "Verner65", 
              "RK65", "RK87"] #from 0 to 9
    RK_Method = Method[3]
    #print(RK_Method)
    tol = 1e-7

    V1 = RK(RK_Method, "First", U, t, dt, F) 
    V2 = RK(RK_Method, "Second", U, t, dt, F) 

    a, b, bs, c, q, Ne = Butcher_array(RK_Method)

    h = min(dt, Step_Size(V1-V2, tol, dt,  min(q)))

    N_n = int(dt/h)+1
    n_dt = dt/N_n

    V1 = U
    V2 = U

    for i in range(N_n):
        time = t + i*dt/int(N_n)
        V1 = V2
        V2 = RK(RK_Method, "First", V1, time, n_dt, F)

    U2 = V2

    ierr = 0

    return U2



def RK(name, tag, U1, t, dt, F):
    a, b, bs, c, q, Ne = Butcher_array(name)
    k = zeros([Ne, len(U1)])

    k[0,:] = F(U1, t + c[0]*dt)

    if tag=="First":
        
        for i in range(1,Ne):
            Up = U1
            for j in range(i):
                Up = Up + dt*a[i,j]*k[j,:]

            k[i,:] = F(Up, t + c[i]*dt)

        U2 = U1 + dt*matmul(b,k)

    elif tag == "Second":

        for i in range(1,Ne):
            Up = U1
            for j in range(i):
                Up = Up + dt*a[i,j]*k[j,:]

            k[i,:] = F(Up, t + c[i]*dt)

        U2 = U1 + dt*matmul(bs,k)

    return U2



def Step_Size(dU, tol, dt, q): #dU es el error estimado, tol el error mÃ¡ximo permitido y q el orden de dicho error
    normT = norm(dU)

    if normT > tol:
        step_size = dt*(tol/normT)**(1/(q+1))
    else:
        step_size = dt

    return step_size

def Butcher_array(name):
    if name == "HeunEuler21":
        q = [2,1]
        Ne = 2 

        a = zeros([Ne,Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])
      
        c = [ 0., 1. ]

        a[0,:] = [  0. ]
        a[1,:] = [  1. ]

        b[:]  = [ 1./2, 1./2 ]
        bs[:] = [ 1.,    0.  ]
   
    elif  name == "RK21":
        q = [2,1]
        Ne = 3 

        a = zeros([Ne,Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])
      
        c[:] = [ 0., 0.5, 1. ]

        a[0,:] = [  0., 0. ]
        a[1,:] = [  1./2, 0. ]
        a[2,:] = [  1./256,  255./256	]

        b[:]  = [ 1./256,	255./256,	0. ]
        bs[:] = [ 1./512,	255./256,	1./512 ]
      
    elif  name=="BogackiShampine":
        q = [3,2]
        Ne = 4 

        a = zeros([Ne,Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])
      
        c[:] = [ 0., 1./2, 3./4, 1. ]

        a[0,:] = [  0., 0., 0.            ]
        a[1,:] = [ 1./2, 0., 0.           ]
        a[2,:] = [ 0.,	3./4, 0.    	]
        a[3,:] = [ 2./9,	1./3,	4./9 	]

        b[:]  = [ 2./9,	1./3,	4./9,	0. ]
        bs[:] = [ 7./24,	1./4,	1./3,	1./8 ]
 
      
    elif name=="DOPRI54": 
        q = [5,4]
        Ne = 7 

        a = zeros([Ne,Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])
      
        c[:] = [ 0., 1./5, 3./10, 4./5, 8./9, 1., 1. ]

        a[0,:] = [          0.,           0.,           0.,         0.,           0.,     0. ]
        a[1,:] = [      1./5  ,           0.,           0.,         0.,           0.,     0. ]
        a[2,:]= [      3./40 ,        9./40,           0.,         0.,           0.,     0. ]
        a[3,:] = [     44./45 ,      -56./15,        32./9,         0.,           0.,     0. ]
        a[4,:] = [ 19372./6561, -25360./2187,  64448./6561,  -212./729,           0.,     0. ]
        a[5,:] = [  9017./3168,    -355./33 ,  46732./5247,    49./176, -5103./18656,     0. ]
        a[6,:]= [    35./384 ,           0.,    500./1113,   125./192, -2187./6784 , 11./84 ]

        b[:]  = [ 35./384   , 0.,   500./1113,  125./192,  -2187./6784  ,  11./84  ,     0.]
        bs[:] = [5179./57600, 0., 7571./16695,  393./640, -92097./339200, 187./2100, 1./40 ]  
    

    elif name=="CashKarp":
        q = [5,4] 
        Ne = 6 

        a = zeros([Ne,Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])

        c[:] = [ 0., 1./5, 3./10, 3./5, 1., 7./8 ]
      
        a[0,:] = [ 0.,          0.,       0.,         0.,            0. ] 
        a[1,:] = [ 1./5,        0.,       0.,         0.,            0. ] 
        a[2,:] = [ 3./40,       9./40,    0.,         0.,            0. ] 
        a[3,:] = [ 3./10,      -9./10,    6./5,       0.,            0. ] 
        a[4,:] = [ -11./54,     5./2,    -70./27,     35./27,        0. ] 
        a[5,:] = [ 1631./55296, 175./512, 575./13824, 44275./110592, 253./4096 ] 

        b[:]  = [    37./378, 0.,     250./621,     125./594,         0., 512./1771]
        bs[:] = [2825./27648, 0., 18575./48384, 13525./55296, 277./14336,     1./4 ]    
       
    elif name=="Fehlberg54":
        q = [5,4]
        Ne = 6

        a = zeros([Ne, Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])

        c[:] = [ 0., 1./4, 3./8, 12./13, 1., 1./2 ]
        
        a[0,:] = [ 0.        ,   0.       ,  0.        ,    0.     ,            0. ]
        a[1,:] = [ 1./4      ,   0.       ,  0.        ,    0.     ,            0. ]
        a[2,:] = [ 3./32     ,   9./32    ,  0.        ,    0.     ,            0. ]
        a[3,:] = [ 1932./2197, -7200./2197, 7296./2197 ,    0.     ,            0. ]
        a[4,:] = [ 439./216  ,  -8.       , 3680./513  , -845./4104,            0. ]
        a[5,:] = [ -8./27    ,   2.       , -3544./2565, 1859./4104,       -11./40 ]
        
        b[:] = [ 16./135, 0., 6656./12825, 28561./56430, -9./50, 2./55]
        bs[:] = [25./216, 0., 1408./2565, 2197./4104, -1./5 , 0. ]  
        
    elif (name=="Fehlberg87"):
        q = [8,7]
        Ne = 13

        a = zeros([Ne, Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])

        c[:] = [ 0., 2./27, 1./9, 1./6, 5./12, 1./2, 5./6, 1./6, 2./3 , 1./3,   1., 0., 1.]
        
        a[0,:] = [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
        a[1,:] = [ 2./27, 0., 0., 0., 0., 0., 0.,  0., 0., 0., 0., 0.]
        a[2,:] = [ 1./36 , 1./12, 0., 0., 0., 0., 0.,  0.,0., 0., 0., 0.]
        a[3,:] = [ 1./24 , 0., 1./8 , 0., 0., 0., 0., 0., 0., 0., 0., 0.]
        a[4,:] = [ 5./12, 0., -25./16, 25./16., 0., 0., 0., 0., 0., 0., 0., 0.]
        a[5,:] = [ 1./20, 0., 0., 1./4, 1./5, 0., 0.,0., 0., 0., 0., 0.]
        a[6,:] = [-25./108, 0., 0., 125./108, -65./27, 125./54, 0., 0., 0., 0., 0., 0.]
        a[7,:] = [ 31./300, 0., 0., 0., 61./225, -2./9, 13./900, 0., 0., 0., 0., 0.]
        a[8,:] = [ 2., 0., 0., -53./6, 704./45, -107./9, 67./90, 3., 0., 0., 0., 0.]
        a[9,:] = [-91./108, 0., 0., 23./108, -976./135, 311./54, -19./60, 17./6, -1./12, 0., 0., 0.]
        a[10,:] = [ 2383./4100, 0., 0., -341./164, 4496./1025, -301./82, 2133./4100, 45./82, 45./164, 18./41, 0., 0.]
        a[11,:] = [ 3./205, 0., 0., 0., 0., -6./41, -3./205, -3./41, 3./41, 6./41, 0., 0.]
        a[12,:] = [ -1777./4100, 0., 0., -341./164, 4496./1025, -289./82, 2193./4100, 51./82, 33./164, 19./41, 0.,  1.]
        
        b[:] = [ 41./840, 0., 0., 0., 0., 34./105, 9./35, 9./35, 9./280, 9./280, 41./840, 0., 0.]
        bs[:] = [ 0., 0., 0., 0., 0., 34./105, 9./35, 9./35, 9./280, 9./280, 0., 41./840, 41./840]
       
       
    elif name=="Verner65":
        q = [6,5]
        Ne = 8

        a = zeros([Ne, Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])

        c[:] = [ 0., 1./6, 4./15, 2./3, 5./6, 1., 1./15, 1. ]
        
        a[0,:] = [ 0. , 0.,  0., 0.,  0. ,  0. ,   0. ]
        a[1,:] = [ 1./6 , 0.,  0., 0.,  0. ,  0. ,   0. ]
        a[2,:] = [ 4./75 , 16./75,  0., 0.,  0. ,  0. ,   0. ]
        a[3,:] = [ 5./6 , -8./3,  5./2, 0.,  0. ,  0. ,   0. ]
        a[4,:] = [ -165./64 , 55./6, -425./64, 85./96,  0. ,  0. ,   0. ]
        a[5,:] = [ 12./5, -8., 4015./612, -11./36,  88./255 ,  0. ,   0. ]
        a[6,:] = [ -8263./15000, 124./75, -643./680, -81./250, 2484./10625 ,  0. ,   0. ]
        a[7,:] = [ 3501./1720 , -300./43, 297275./52632, -319./2322, 24068./84065 ,  0. ,   3850./26703 ]
        
        b[:] = [ 3./40 , 0.,  875./2244, 23./72, 264./1955,    0., 125./11592, 43./616 ]
        bs[:] = [13./160, 0., 2375./5984,  5./16,    12./85, 3./44,         0.,      0. ]
        
        
    elif name=="RK65":
        q = [6,5]
        Ne = 8

        a = zeros([Ne, Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])

        c[:] = [ 0., 1./10, 2./9, 3./7, 3./5, 4./5, 1., 1. ]
        
        a[0,:] = [ 0.             ,  0.        ,  0.                , 0.               ,  0.              ,  0.             ,   0. ]
        a[1,:] = [ 1./10          ,  0.        ,  0.                , 0.               ,  0.              ,  0.             ,   0. ]
        a[2,:] = [ -2./81         ,  20./81    ,  0.                , 0.               ,  0.              ,  0.             ,   0. ]
        a[3,:] = [ 615./1372      ,  -270./343 ,  1053./1372        , 0.               ,  0.              ,  0.             ,   0. ]
        a[4,:] = [ 3243./5500     ,  -54./55   ,  50949./71500      , 4998./17875      ,  0.              ,  0.             ,   0. ]
        a[5,:] = [ -26492./37125  ,  72./55    ,  2808./23375       , -24206./37125    ,  338./459        ,  0.             ,   0. ]
        a[6,:] = [ 5561./2376     , -35./11    ,  -24117./31603     , 899983./200772   ,  -5225./1836     ,  3925./4056     ,   0. ]
        a[7,:] = [ 465467./266112 , -2945./1232,  -5610201./14158144, 10513573./3212352,  -424325./205632 ,  376225./454272 ,   0. ]
        
        b[:] = [ 61./864   , 0., 98415./321776, 16807./146016 , 1375./7344 , 1375./5408, -37./1120, 1./10]
        bs[:] = [ 821./10800, 0., 19683./71825 , 175273./912600,  395./3672 ,  785./2704,     3./50,   0. ]
        
        
    elif name=="RK87":
        q = [8,7]
        Ne = 13

        a = zeros([Ne, Ne-1])
        b = zeros([Ne])
        bs = zeros([Ne])
        c = zeros([Ne])

        c[:] = [ 0., 1./18, 1./12, 1./8, 5./16, 3./8, 59./400, 93./200, 5490023248./9719169821, 13./20, 1201146811./1299019798, 1., 1.]
        
        a[0,:] = [ 0.                     , 0.   ,   0.   , 0.                       , 0., 0., 0., 0., 0., 0., 0., 0.]
        a[1,:] = [ 1./18                  , 0.   ,   0.   , 0.                       , 0., 0., 0., 0., 0., 0., 0., 0.]
        a[2,:] = [ 1./48                  , 1./16,   0.   , 0.                       , 0., 0., 0., 0., 0., 0., 0., 0.]
        a[3,:] = [ 1./32                  , 0.   ,   3./32, 0.                       , 0., 0., 0., 0., 0., 0., 0., 0.]
        a[4,:] = [ 5./16                  , 0.   , -75./64, 75./64                   , 0., 0., 0., 0., 0., 0., 0., 0.]
        a[5,:] = [ 3./80                  , 0.   ,   0.   , 3./16                    , 3./20, 0., 0., 0., 0., 0., 0., 0.]
        a[6,:] = [ 29443841./614563906    , 0.   ,   0.   , 77736538./692538347      , -28693883./1125000000, 23124283./1800000000, 0., 0., 0., 0., 0., 0.]
        a[7,:] = [ 16016141./946692911    , 0.   ,   0.   , 61564180./158732637      , 22789713./633445777, 545815736./2771057229, -180193667./1043307555, 0., 0., 0., 0., 0.]
        a[8,:] = [ 39632708./573591083    , 0.   ,   0.   , -433636366./683701615    , -421739975./2616292301, 100302831./723423059, 790204164./839813087, 800635310./3783071287, 0., 0., 0., 0.]
        a[9,:] = [ 246121993./1340847787 , 0.   ,   0.   , -37695042795./15268766246, -309121744./1061227803, -12992083./490766935, 6005943493./2108947869, 393006217./1396673457, 123872331./1001029789, 0., 0., 0.]
        a[10,:] = [ -1028468189./846180014, 0.   ,   0.   , 8478235783./508512852    , 1311729495./1432422823, -10304129995./1701304382, -48777925059./3047939560, 15336726248./1032824649, -45442868181./3398467696, 3065993473./597172653, 0., 0.]
        a[11,:] = [ 185892177./718116043  , 0.   ,   0.   , -3185094517./667107341   , -477755414./1098053517, -703635378./230739211, 5731566787./1027545527, 5232866602./850066563, -4093664535./808688257, 3962137247./1805957418, 65686358./487910083, 0.]
        a[12,:] = [ 403863854./491063109  , 0.   ,   0.   , -5068492393./434740067   , -411421997./543043805, 652783627./914296604, 11173962825./925320556, -13158990841./6184727034, 3936647629./1978049680, -160528059./685178525, 248638103./1413531060, 0.]
        
        b[:] = [ 14005451./335480064, 0., 0., 0., 0., -59238493./1068277825, 181606767./758867731, 561292985./797845732, -1041891430./1371343529, 760417239./1151165299, 118820643./751138087, -528747749./2220607170, 1./4]
        bs[:] = [ 13451932./455176623, 0., 0., 0., 0., -808719846./976000145, 1757004468./5645159321, 656045339./265891186, -3867574721./1518517206, 465885868./322736535, 53011238./667516719, 2./45, 0.]
       
    return a, b, bs, c, q, Ne

